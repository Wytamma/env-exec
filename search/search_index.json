{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"env-exec (envx)","text":""},{"location":"#overview","title":"Overview","text":"<p>The <code>env-exec</code> library is a versatile Python utility designed for managing computational environments and containers, as well as executing code within them. It aims to simplify the process of setting up, utilizing, and tearing down different kinds of environments, including but not limited to Conda environments. </p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install env-exec\n</code></pre>"},{"location":"#usage-as-a-libary","title":"Usage as a libary","text":"<p>Create an ephemeral Conda environment with dependencies installed.</p> <pre><code>with CondaEnv(dependencies=['python']) as env:\n    # Execute a command in the environment\n    env.exec('python -V') \n# The environment is automatically cleaned up after exiting the context manager\n</code></pre> <p>Capture the output of executed commands.</p> <pre><code>with CondaEnv(dependencies=['python']) as env:\n    output = env.exec('python -V', capture_output=True)\n    print(output.stdout) # Python 3.8.5\n</code></pre> <p>Give the environment a name to prevent it from being deleted. If the environment already exists, it will be reused.</p> <pre><code>with CondaEnv('my-env', dependencies=['python']) as env:\n    env.exec('python -V')\n\nCondaEnv('my-env').exists # True\n</code></pre> <p>Error if dependencies are missing from env.</p> <pre><code># Raises MissingDependencyError\nwith CondaEnv('my-env', dependencies=['python', 'numpy']) as env:\n    pass\n</code></pre> <p>Install dependencies if they are missing.</p> <pre><code>with CondaEnv('my-env', dependencies=['python', 'numpy'], install_missing=True) as env:\n    env.exec('python -c \"import numpy\"')\n</code></pre>"},{"location":"#usage-as-a-cli","title":"Usage as a CLI","text":"<pre><code>$ envx -d python=3.12.0 mamba python -V\nPython 3.12.0\n</code></pre> <pre><code>usage: envx [-h] [-n NAME] [-d DEPENDENCY] [-c CHANNEL] [-v] {conda,mamba,docker} ...\n\ncli for executing commands in a virtual environment\n\npositional arguments:\n  {conda,mamba,docker}  The package manager to use.\n  command               The command to execute.\n\noptions:\n  -h, --help            show this help message and exit\n  -n NAME, --name NAME  The name of the environment.\n  -d DEPENDENCY, --dependency DEPENDENCY\n                        The dependencies to install.\n  -c CHANNEL, --channel CHANNEL\n                        Channel to use.\n  -v, --verbose         If True, the output of the commands will be captured.\n</code></pre>"},{"location":"#features","title":"Features","text":""},{"location":"#environment-management","title":"Environment Management","text":"<ul> <li>Automated Setup: Create new computational environments programmatically.</li> <li>Dependency Management: Specify and manage dependencies for each environment.</li> <li>Dynamic Names: Generate random environment names or specify them manually.</li> </ul>"},{"location":"#command-execution","title":"Command Execution","text":"<ul> <li>Run Code: Execute code blocks, shell commands, or scripts within the environment.</li> <li>Capture Output: Option to capture the output of executed commands.</li> </ul>"},{"location":"#error-handling","title":"Error Handling","text":"<ul> <li>Custom Exceptions: Well-defined exceptions for handling environment-specific issues.</li> </ul>"},{"location":"#extensible-design","title":"Extensible Design","text":"<ul> <li>Pluggable Backends: Easily extend the library to support other environment managers or container systems.</li> </ul>"},{"location":"#cleanup","title":"Cleanup","text":"<ul> <li>Context Manager: Use as a context manager to ensure proper resource cleanup.</li> </ul>"},{"location":"#dependencies","title":"Dependencies","text":"<ul> <li>Python 3.7 or higher</li> <li>Conda installed and accessible via the command line (if using <code>CondaEnv</code>)</li> </ul>"},{"location":"#extending-for-other-managers","title":"Extending for Other Managers","text":"<p>You can also extend the library to create your own environment managers. Just inherit from the <code>Env</code> class and implement the required methods.</p>"},{"location":"#error-handling_1","title":"Error Handling","text":"<p>The library raises custom exceptions for more explicit error handling. These include:</p> <ul> <li><code>ExecError</code>: Raised if an error occurs while executing a command in the environment.</li> <li><code>MissingDependencyError</code>: Raised if missing dependencies are found and not installed.</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! If you have a feature request, bug report, or wish to contribute code, please feel free to open an issue or a pull request.</p>"},{"location":"#license","title":"License","text":"<p>The code in this project is licensed under MIT. Please see the accompanying LICENSE file for details.</p>"},{"location":"reference/cli/","title":"Cli","text":""},{"location":"reference/environments/","title":"Environments","text":""},{"location":"reference/environments/#src.env_exec.environments.env.Env","title":"<code>Env</code>","text":"<p>Abstract base class for environment objects.</p> Source code in <code>src/env_exec/environments/env.py</code> <pre><code>class Env(metaclass=ABCMeta):\n    \"\"\"\n    Abstract base class for environment objects.\n    \"\"\"\n    @abstractmethod\n    def __enter__(self):\n        \"\"\"\n        Enter the runtime context related to this object.\n\n        Returns:\n            Env: The environment object.\n        \"\"\"\n        return self\n\n    @abstractmethod\n    def __exit__(self, exc_type, exc_value, traceback):\n        \"\"\"\n        Exit the runtime context related to this object.\n\n        Args:\n            exc_type (Exception): The exception type.\n            exc_value (Exception): The exception value.\n            traceback (Traceback): The traceback object.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def create(self):\n        \"\"\"\n        Create the environment.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def delete(self):\n        \"\"\"\n        Delete the environment.\n        \"\"\"\n        pass\n\n    @property\n    @abstractmethod\n    def available(self):\n        \"\"\"\n        Check if the env manager is available.\n\n        Returns:\n            bool: True if the environment exists, False otherwise.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def exec(self, command: str):\n        \"\"\"\n        Execute a command in the environment.\n\n        Args:\n            command (str): The command to execute.\n        \"\"\"\n        pass\n</code></pre>"},{"location":"reference/environments/#src.env_exec.environments.env.Env.available","title":"<code>available</code>  <code>abstractmethod</code> <code>property</code>","text":"<p>Check if the env manager is available.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the environment exists, False otherwise.</p>"},{"location":"reference/environments/#src.env_exec.environments.env.Env.__enter__","title":"<code>__enter__()</code>  <code>abstractmethod</code>","text":"<p>Enter the runtime context related to this object.</p> <p>Returns:</p> Name Type Description <code>Env</code> <p>The environment object.</p> Source code in <code>src/env_exec/environments/env.py</code> <pre><code>@abstractmethod\ndef __enter__(self):\n    \"\"\"\n    Enter the runtime context related to this object.\n\n    Returns:\n        Env: The environment object.\n    \"\"\"\n    return self\n</code></pre>"},{"location":"reference/environments/#src.env_exec.environments.env.Env.__exit__","title":"<code>__exit__(exc_type, exc_value, traceback)</code>  <code>abstractmethod</code>","text":"<p>Exit the runtime context related to this object.</p> <p>Parameters:</p> Name Type Description Default <code>exc_type</code> <code>Exception</code> <p>The exception type.</p> required <code>exc_value</code> <code>Exception</code> <p>The exception value.</p> required <code>traceback</code> <code>Traceback</code> <p>The traceback object.</p> required Source code in <code>src/env_exec/environments/env.py</code> <pre><code>@abstractmethod\ndef __exit__(self, exc_type, exc_value, traceback):\n    \"\"\"\n    Exit the runtime context related to this object.\n\n    Args:\n        exc_type (Exception): The exception type.\n        exc_value (Exception): The exception value.\n        traceback (Traceback): The traceback object.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/environments/#src.env_exec.environments.env.Env.create","title":"<code>create()</code>  <code>abstractmethod</code>","text":"<p>Create the environment.</p> Source code in <code>src/env_exec/environments/env.py</code> <pre><code>@abstractmethod\ndef create(self):\n    \"\"\"\n    Create the environment.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/environments/#src.env_exec.environments.env.Env.delete","title":"<code>delete()</code>  <code>abstractmethod</code>","text":"<p>Delete the environment.</p> Source code in <code>src/env_exec/environments/env.py</code> <pre><code>@abstractmethod\ndef delete(self):\n    \"\"\"\n    Delete the environment.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/environments/#src.env_exec.environments.env.Env.exec","title":"<code>exec(command)</code>  <code>abstractmethod</code>","text":"<p>Execute a command in the environment.</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>str</code> <p>The command to execute.</p> required Source code in <code>src/env_exec/environments/env.py</code> <pre><code>@abstractmethod\ndef exec(self, command: str):\n    \"\"\"\n    Execute a command in the environment.\n\n    Args:\n        command (str): The command to execute.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/environments/#src.env_exec.environments.conda.CondaEnv","title":"<code>CondaEnv</code>","text":"<p>             Bases: <code>Env</code></p> <p>A Conda environment.</p> Source code in <code>src/env_exec/environments/conda.py</code> <pre><code>class CondaEnv(Env):\n    \"\"\"\n    A Conda environment.\n    \"\"\"\n    def __init__(\n        self,\n        name: Optional[str] = None,\n        *,\n        dependencies: Optional[List[str]] = None,\n        channels: Optional[List[str]] = None,\n        force: bool = False,\n        check: bool = True,\n        clean_up: bool = False,\n        install_missing: bool = False,\n        capture_output: bool = False,\n        manager: str = \"conda\",\n    ):\n        \"\"\"\n        Initializes a Conda environment.\n\n        Args:\n            name (str, optional): The name of the environment. If not provided, a random name will be generated.\n            dependencies (list[str], optional): A list of dependencies to install in the environment.\n            force (bool, optional): If True, the environment will be recreated even if it already exists.\n            check (bool, optional): If True, the environment will be checked for missing dependencies.\n            clean_up (bool, optional): If True, the environment will be deleted when the context manager exits.\n            install_missing (bool, optional): If True, missing dependencies will be installed.\n            capture_output (bool, optional): If True, the output of the commands will be captured.\n            mamba (bool, optional): If True, mamba will be used as the package manager.\n        \"\"\"\n        if dependencies is None:\n            dependencies = []\n        if name is None:\n            # create random id for env name\n            name = \"env_exec_\" + str(uuid.uuid4()).replace(\"-\", \"\")[:8]\n            clean_up = True\n        self.name = name\n        self.dependencies = dependencies\n        self.channels = channels\n        self.force = force\n        self.check = check\n        self.clean_up = clean_up\n        self.capture_output = capture_output\n        self.install_missing = install_missing\n        self.manager = manager\n        self.output = None\n\n    def __enter__(self):\n        \"\"\"\n        Enters the context manager.\n\n        Returns:\n            CondaEnv: The CondaEnv instance.\n\n        Raises:\n            MissingDependencyError: If check is True and there are missing dependencies and install_missing is False.\n        \"\"\"\n        if not self.available:\n            msg = f\"{self.manager} is not available\"\n            raise ManagerNotAvailable(msg)\n        if self.force or not self.exists:\n            self.output = self.create(capture_output=self.capture_output)\n        if self.check:\n            try:\n                missing_dependencies = self.get_missing_dependencies()\n                if not missing_dependencies:\n                    return self\n                elif self.install_missing:\n                    self.install(missing_dependencies, capture_output=self.capture_output)\n                else:\n                    raise MissingDependencyError(missing_dependencies)\n            except Exception as e:\n                if self.clean_up:\n                    self.delete(capture_output=True)\n                raise e\n\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        \"\"\"\n        Exits the context manager.\n\n        Args:\n            exc_type (type): The type of the exception raised.\n            exc_value (Exception): The exception raised.\n            traceback (traceback): The traceback of the exception raised.\n\n        Side Effects:\n            If clean_up is True, the environment will be deleted.\n        \"\"\"\n        if self.clean_up:\n            self.output = self.delete(capture_output=self.capture_output)\n\n    @property\n    def exists(self):\n        \"\"\"\n        Checks if the environment exists.\n\n        Returns:\n            bool: True if the environment exists, False otherwise.\n        \"\"\"\n        completed_process = subprocess.run(\n            [self.manager, \"env\", \"list\", \"--json\"], capture_output=True, text=True, check=True\n        )\n        env_data = json.loads(completed_process.stdout)\n        return self.name in [env.split(\"/\")[-1] for env in env_data[\"envs\"]]\n\n    @property\n    def available(self):\n        \"\"\"\n        Check if manager (conda) is available.\n        \"\"\"\n        try:\n            subprocess.run(\n                [self.manager, \"--version\"],\n                check=True,\n                capture_output=True,\n                text=True,\n            )\n            return True\n        except subprocess.CalledProcessError:\n            return False\n\n    def create(self, *, capture_output: bool = False):\n        \"\"\"\n        Creates the environment.\n\n        Args:\n            capture_output (bool, optional): If True, the output of the commands will be captured.\n\n        Returns:\n            CompletedProcess: The CompletedProcess object of the command.\n        \"\"\"\n        cmd = [self.manager, \"create\", \"--name\", self.name]\n        if self.channels:\n            for channel in self.channels:\n                cmd += [\"--channel\", channel]\n        cmd += [*self.dependencies, \"--yes\"]\n        try:\n            return subprocess.run(\n                cmd,\n                check=True,\n                capture_output=capture_output,\n                text=True,\n            )\n        except subprocess.CalledProcessError:\n            msg = \"\\n\\n---\"\n            msg += f\"\\n\\nError Creating Environment: \\n{self.manager} create --name {self.name} {' '.join(self.dependencies)}\"\n            msg += \"\\n(look at the top of the traceback above for more information)\"\n            raise CreateEnvError(msg) from None\n\n    def install(self, package: Union[List[str], str], *, capture_output: bool = False):\n        \"\"\"\n        Installs a package(s) in the environment.\n\n        Args:\n            package (str, list): The package to install.\n            capture_output (bool, optional): If True, the output of the commands will be captured.\n\n        Returns:\n            CompletedProcess: The CompletedProcess object of the command.\n        \"\"\"\n        if isinstance(package, str):\n            package = [package]\n        cmd = [self.manager, \"install\", \"--name\", self.name]\n        if self.channels:\n            for channel in self.channels:\n                cmd += [\"--channel\", channel]\n        cmd += [*package, \"--yes\"]\n        try:\n            return subprocess.run(\n                cmd,\n                check=True,\n                capture_output=capture_output,\n                text=True,\n            )\n        except subprocess.CalledProcessError:\n            msg = \"\\n\\n---\"\n            msg += f\"\\n\\nError Installing Package(s): \\n{self.manager} install --name {self.name} {' '.join(package)}\"\n            msg += \"\\n(look at the top of the traceback above for more information)\"\n            raise InstallPackageError(msg) from None\n\n    def delete(self, *, capture_output: bool = False):\n        \"\"\"\n        Deletes the environment.\n\n        Args:\n            capture_output (bool, optional): If True, the output of the commands will be captured.\n\n        Returns:\n            CompletedProcess: The CompletedProcess object of the command.\n        \"\"\"\n        return subprocess.run(\n            [self.manager, \"env\", \"remove\", \"--name\", self.name, \"--yes\"],\n            check=True,\n            capture_output=capture_output,\n            text=True,\n        )\n\n\n    def get_missing_dependencies(self):\n        \"\"\"\n        Gets the missing dependencies of a Conda environment.\n\n        Args:\n            self (CondaEnv): The Conda environment.\n\n        Returns:\n            List[str]: The missing dependencies.\n\n        Raises:\n            ExecError: If an error occurs while running the command.\n            MissingDependencyError: If a dependency is missing.\n\n        Examples:\n            &gt;&gt;&gt; env = CondaEnv(\"my_env\", [\"numpy=1.18.1\", \"pandas\"])\n            &gt;&gt;&gt; env.get_missing_dependencies()\n            [\"numpy=1.18.1\"]\n        \"\"\"\n        completed_process = subprocess.run(\n            [self.manager, \"list\", \"--name\", self.name, \"--json\"], capture_output=True, text=True, check=True\n        )\n        installed_packages = {package[\"name\"]:package[\"version\"] for package in json.loads(completed_process.stdout)}\n        missing = []\n        for dependency in self.dependencies:\n            try:\n                name, version = dependency.split(\"=\")\n            except ValueError:\n                name = dependency\n                version = None\n            name = name[4:] if name.startswith(\"pip:\") else name\n            if name in installed_packages:\n                if version and version != installed_packages[name]:\n                    missing.append(dependency)\n            else:\n                missing.append(dependency)\n        return missing\n\n    def exec(self, command: str, *, capture_output: bool = False, isolate: bool = False):\n        \"\"\"\n        Executes a command in the environment.\n\n        Args:\n            command (str): The command to execute.\n            capture_output (bool, optional): If True, the output of the commands will be captured.\n            isolate (bool, optional): If True, the command will be executed in a isolated shell.\n\n        Returns:\n            CompletedProcess: The CompletedProcess object of the command.\n\n        Raises:\n            ExecError: If the command fails.\n\n        Examples:\n            &gt;&gt;&gt; with CondaEnv(name=\"my_env\") as env:\n            ...   env.exec(\"echo 'Hello World!'\")\n            Hello World!\n        \"\"\"\n        if isolate:\n            completed_process = subprocess.run(\n                [self.manager, \"info\", \"--envs\"], capture_output=True, text=True, check=True\n            )\n            for line in completed_process.stdout.split(\"\\n\"):\n                if line.startswith(self.name):\n                    env_path = line.split()[-1]\n                    command = f\"PATH={env_path}/bin {command}\"\n                    break\n        try:\n            return subprocess.run(\n                [self.manager, \"run\", \"--live-stream\", \"--name\", self.name, \"bash\", \"-c\", command],\n                check=True,\n                capture_output=capture_output,\n                text=True,\n            )\n        except subprocess.CalledProcessError:\n            msg = \"\\n\\n---\"\n            msg += f\"\\n\\nError Running Command: \\n{command}\"\n            msg += \"\\n(look at the top of the traceback above for more information)\"\n            raise ExecError(msg) from None\n</code></pre>"},{"location":"reference/environments/#src.env_exec.environments.conda.CondaEnv.available","title":"<code>available</code>  <code>property</code>","text":"<p>Check if manager (conda) is available.</p>"},{"location":"reference/environments/#src.env_exec.environments.conda.CondaEnv.exists","title":"<code>exists</code>  <code>property</code>","text":"<p>Checks if the environment exists.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the environment exists, False otherwise.</p>"},{"location":"reference/environments/#src.env_exec.environments.conda.CondaEnv.__enter__","title":"<code>__enter__()</code>","text":"<p>Enters the context manager.</p> <p>Returns:</p> Name Type Description <code>CondaEnv</code> <p>The CondaEnv instance.</p> <p>Raises:</p> Type Description <code>MissingDependencyError</code> <p>If check is True and there are missing dependencies and install_missing is False.</p> Source code in <code>src/env_exec/environments/conda.py</code> <pre><code>def __enter__(self):\n    \"\"\"\n    Enters the context manager.\n\n    Returns:\n        CondaEnv: The CondaEnv instance.\n\n    Raises:\n        MissingDependencyError: If check is True and there are missing dependencies and install_missing is False.\n    \"\"\"\n    if not self.available:\n        msg = f\"{self.manager} is not available\"\n        raise ManagerNotAvailable(msg)\n    if self.force or not self.exists:\n        self.output = self.create(capture_output=self.capture_output)\n    if self.check:\n        try:\n            missing_dependencies = self.get_missing_dependencies()\n            if not missing_dependencies:\n                return self\n            elif self.install_missing:\n                self.install(missing_dependencies, capture_output=self.capture_output)\n            else:\n                raise MissingDependencyError(missing_dependencies)\n        except Exception as e:\n            if self.clean_up:\n                self.delete(capture_output=True)\n            raise e\n\n    return self\n</code></pre>"},{"location":"reference/environments/#src.env_exec.environments.conda.CondaEnv.__exit__","title":"<code>__exit__(exc_type, exc_value, traceback)</code>","text":"<p>Exits the context manager.</p> <p>Parameters:</p> Name Type Description Default <code>exc_type</code> <code>type</code> <p>The type of the exception raised.</p> required <code>exc_value</code> <code>Exception</code> <p>The exception raised.</p> required <code>traceback</code> <code>traceback</code> <p>The traceback of the exception raised.</p> required Side Effects <p>If clean_up is True, the environment will be deleted.</p> Source code in <code>src/env_exec/environments/conda.py</code> <pre><code>def __exit__(self, exc_type, exc_value, traceback):\n    \"\"\"\n    Exits the context manager.\n\n    Args:\n        exc_type (type): The type of the exception raised.\n        exc_value (Exception): The exception raised.\n        traceback (traceback): The traceback of the exception raised.\n\n    Side Effects:\n        If clean_up is True, the environment will be deleted.\n    \"\"\"\n    if self.clean_up:\n        self.output = self.delete(capture_output=self.capture_output)\n</code></pre>"},{"location":"reference/environments/#src.env_exec.environments.conda.CondaEnv.__init__","title":"<code>__init__(name=None, *, dependencies=None, channels=None, force=False, check=True, clean_up=False, install_missing=False, capture_output=False, manager='conda')</code>","text":"<p>Initializes a Conda environment.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the environment. If not provided, a random name will be generated.</p> <code>None</code> <code>dependencies</code> <code>list[str]</code> <p>A list of dependencies to install in the environment.</p> <code>None</code> <code>force</code> <code>bool</code> <p>If True, the environment will be recreated even if it already exists.</p> <code>False</code> <code>check</code> <code>bool</code> <p>If True, the environment will be checked for missing dependencies.</p> <code>True</code> <code>clean_up</code> <code>bool</code> <p>If True, the environment will be deleted when the context manager exits.</p> <code>False</code> <code>install_missing</code> <code>bool</code> <p>If True, missing dependencies will be installed.</p> <code>False</code> <code>capture_output</code> <code>bool</code> <p>If True, the output of the commands will be captured.</p> <code>False</code> <code>mamba</code> <code>bool</code> <p>If True, mamba will be used as the package manager.</p> required Source code in <code>src/env_exec/environments/conda.py</code> <pre><code>def __init__(\n    self,\n    name: Optional[str] = None,\n    *,\n    dependencies: Optional[List[str]] = None,\n    channels: Optional[List[str]] = None,\n    force: bool = False,\n    check: bool = True,\n    clean_up: bool = False,\n    install_missing: bool = False,\n    capture_output: bool = False,\n    manager: str = \"conda\",\n):\n    \"\"\"\n    Initializes a Conda environment.\n\n    Args:\n        name (str, optional): The name of the environment. If not provided, a random name will be generated.\n        dependencies (list[str], optional): A list of dependencies to install in the environment.\n        force (bool, optional): If True, the environment will be recreated even if it already exists.\n        check (bool, optional): If True, the environment will be checked for missing dependencies.\n        clean_up (bool, optional): If True, the environment will be deleted when the context manager exits.\n        install_missing (bool, optional): If True, missing dependencies will be installed.\n        capture_output (bool, optional): If True, the output of the commands will be captured.\n        mamba (bool, optional): If True, mamba will be used as the package manager.\n    \"\"\"\n    if dependencies is None:\n        dependencies = []\n    if name is None:\n        # create random id for env name\n        name = \"env_exec_\" + str(uuid.uuid4()).replace(\"-\", \"\")[:8]\n        clean_up = True\n    self.name = name\n    self.dependencies = dependencies\n    self.channels = channels\n    self.force = force\n    self.check = check\n    self.clean_up = clean_up\n    self.capture_output = capture_output\n    self.install_missing = install_missing\n    self.manager = manager\n    self.output = None\n</code></pre>"},{"location":"reference/environments/#src.env_exec.environments.conda.CondaEnv.create","title":"<code>create(*, capture_output=False)</code>","text":"<p>Creates the environment.</p> <p>Parameters:</p> Name Type Description Default <code>capture_output</code> <code>bool</code> <p>If True, the output of the commands will be captured.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>CompletedProcess</code> <p>The CompletedProcess object of the command.</p> Source code in <code>src/env_exec/environments/conda.py</code> <pre><code>def create(self, *, capture_output: bool = False):\n    \"\"\"\n    Creates the environment.\n\n    Args:\n        capture_output (bool, optional): If True, the output of the commands will be captured.\n\n    Returns:\n        CompletedProcess: The CompletedProcess object of the command.\n    \"\"\"\n    cmd = [self.manager, \"create\", \"--name\", self.name]\n    if self.channels:\n        for channel in self.channels:\n            cmd += [\"--channel\", channel]\n    cmd += [*self.dependencies, \"--yes\"]\n    try:\n        return subprocess.run(\n            cmd,\n            check=True,\n            capture_output=capture_output,\n            text=True,\n        )\n    except subprocess.CalledProcessError:\n        msg = \"\\n\\n---\"\n        msg += f\"\\n\\nError Creating Environment: \\n{self.manager} create --name {self.name} {' '.join(self.dependencies)}\"\n        msg += \"\\n(look at the top of the traceback above for more information)\"\n        raise CreateEnvError(msg) from None\n</code></pre>"},{"location":"reference/environments/#src.env_exec.environments.conda.CondaEnv.delete","title":"<code>delete(*, capture_output=False)</code>","text":"<p>Deletes the environment.</p> <p>Parameters:</p> Name Type Description Default <code>capture_output</code> <code>bool</code> <p>If True, the output of the commands will be captured.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>CompletedProcess</code> <p>The CompletedProcess object of the command.</p> Source code in <code>src/env_exec/environments/conda.py</code> <pre><code>def delete(self, *, capture_output: bool = False):\n    \"\"\"\n    Deletes the environment.\n\n    Args:\n        capture_output (bool, optional): If True, the output of the commands will be captured.\n\n    Returns:\n        CompletedProcess: The CompletedProcess object of the command.\n    \"\"\"\n    return subprocess.run(\n        [self.manager, \"env\", \"remove\", \"--name\", self.name, \"--yes\"],\n        check=True,\n        capture_output=capture_output,\n        text=True,\n    )\n</code></pre>"},{"location":"reference/environments/#src.env_exec.environments.conda.CondaEnv.exec","title":"<code>exec(command, *, capture_output=False, isolate=False)</code>","text":"<p>Executes a command in the environment.</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>str</code> <p>The command to execute.</p> required <code>capture_output</code> <code>bool</code> <p>If True, the output of the commands will be captured.</p> <code>False</code> <code>isolate</code> <code>bool</code> <p>If True, the command will be executed in a isolated shell.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>CompletedProcess</code> <p>The CompletedProcess object of the command.</p> <p>Raises:</p> Type Description <code>ExecError</code> <p>If the command fails.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; with CondaEnv(name=\"my_env\") as env:\n...   env.exec(\"echo 'Hello World!'\")\nHello World!\n</code></pre> Source code in <code>src/env_exec/environments/conda.py</code> <pre><code>def exec(self, command: str, *, capture_output: bool = False, isolate: bool = False):\n    \"\"\"\n    Executes a command in the environment.\n\n    Args:\n        command (str): The command to execute.\n        capture_output (bool, optional): If True, the output of the commands will be captured.\n        isolate (bool, optional): If True, the command will be executed in a isolated shell.\n\n    Returns:\n        CompletedProcess: The CompletedProcess object of the command.\n\n    Raises:\n        ExecError: If the command fails.\n\n    Examples:\n        &gt;&gt;&gt; with CondaEnv(name=\"my_env\") as env:\n        ...   env.exec(\"echo 'Hello World!'\")\n        Hello World!\n    \"\"\"\n    if isolate:\n        completed_process = subprocess.run(\n            [self.manager, \"info\", \"--envs\"], capture_output=True, text=True, check=True\n        )\n        for line in completed_process.stdout.split(\"\\n\"):\n            if line.startswith(self.name):\n                env_path = line.split()[-1]\n                command = f\"PATH={env_path}/bin {command}\"\n                break\n    try:\n        return subprocess.run(\n            [self.manager, \"run\", \"--live-stream\", \"--name\", self.name, \"bash\", \"-c\", command],\n            check=True,\n            capture_output=capture_output,\n            text=True,\n        )\n    except subprocess.CalledProcessError:\n        msg = \"\\n\\n---\"\n        msg += f\"\\n\\nError Running Command: \\n{command}\"\n        msg += \"\\n(look at the top of the traceback above for more information)\"\n        raise ExecError(msg) from None\n</code></pre>"},{"location":"reference/environments/#src.env_exec.environments.conda.CondaEnv.get_missing_dependencies","title":"<code>get_missing_dependencies()</code>","text":"<p>Gets the missing dependencies of a Conda environment.</p> <p>Parameters:</p> Name Type Description Default <code>self</code> <code>CondaEnv</code> <p>The Conda environment.</p> required <p>Returns:</p> Type Description <p>List[str]: The missing dependencies.</p> <p>Raises:</p> Type Description <code>ExecError</code> <p>If an error occurs while running the command.</p> <code>MissingDependencyError</code> <p>If a dependency is missing.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; env = CondaEnv(\"my_env\", [\"numpy=1.18.1\", \"pandas\"])\n&gt;&gt;&gt; env.get_missing_dependencies()\n[\"numpy=1.18.1\"]\n</code></pre> Source code in <code>src/env_exec/environments/conda.py</code> <pre><code>def get_missing_dependencies(self):\n    \"\"\"\n    Gets the missing dependencies of a Conda environment.\n\n    Args:\n        self (CondaEnv): The Conda environment.\n\n    Returns:\n        List[str]: The missing dependencies.\n\n    Raises:\n        ExecError: If an error occurs while running the command.\n        MissingDependencyError: If a dependency is missing.\n\n    Examples:\n        &gt;&gt;&gt; env = CondaEnv(\"my_env\", [\"numpy=1.18.1\", \"pandas\"])\n        &gt;&gt;&gt; env.get_missing_dependencies()\n        [\"numpy=1.18.1\"]\n    \"\"\"\n    completed_process = subprocess.run(\n        [self.manager, \"list\", \"--name\", self.name, \"--json\"], capture_output=True, text=True, check=True\n    )\n    installed_packages = {package[\"name\"]:package[\"version\"] for package in json.loads(completed_process.stdout)}\n    missing = []\n    for dependency in self.dependencies:\n        try:\n            name, version = dependency.split(\"=\")\n        except ValueError:\n            name = dependency\n            version = None\n        name = name[4:] if name.startswith(\"pip:\") else name\n        if name in installed_packages:\n            if version and version != installed_packages[name]:\n                missing.append(dependency)\n        else:\n            missing.append(dependency)\n    return missing\n</code></pre>"},{"location":"reference/environments/#src.env_exec.environments.conda.CondaEnv.install","title":"<code>install(package, *, capture_output=False)</code>","text":"<p>Installs a package(s) in the environment.</p> <p>Parameters:</p> Name Type Description Default <code>package</code> <code>(str, list)</code> <p>The package to install.</p> required <code>capture_output</code> <code>bool</code> <p>If True, the output of the commands will be captured.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>CompletedProcess</code> <p>The CompletedProcess object of the command.</p> Source code in <code>src/env_exec/environments/conda.py</code> <pre><code>def install(self, package: Union[List[str], str], *, capture_output: bool = False):\n    \"\"\"\n    Installs a package(s) in the environment.\n\n    Args:\n        package (str, list): The package to install.\n        capture_output (bool, optional): If True, the output of the commands will be captured.\n\n    Returns:\n        CompletedProcess: The CompletedProcess object of the command.\n    \"\"\"\n    if isinstance(package, str):\n        package = [package]\n    cmd = [self.manager, \"install\", \"--name\", self.name]\n    if self.channels:\n        for channel in self.channels:\n            cmd += [\"--channel\", channel]\n    cmd += [*package, \"--yes\"]\n    try:\n        return subprocess.run(\n            cmd,\n            check=True,\n            capture_output=capture_output,\n            text=True,\n        )\n    except subprocess.CalledProcessError:\n        msg = \"\\n\\n---\"\n        msg += f\"\\n\\nError Installing Package(s): \\n{self.manager} install --name {self.name} {' '.join(package)}\"\n        msg += \"\\n(look at the top of the traceback above for more information)\"\n        raise InstallPackageError(msg) from None\n</code></pre>"},{"location":"reference/errors/","title":"Errors","text":"<p>Custom errors for env_exec</p>"},{"location":"reference/errors/#src.env_exec.errors.CreateEnvError","title":"<code>CreateEnvError</code>","text":"<p>             Bases: <code>EnvExecError</code></p> <p>Exception raised for errors in the execution of a command.</p> Source code in <code>src/env_exec/errors.py</code> <pre><code>class CreateEnvError(EnvExecError):\n    \"\"\"Exception raised for errors in the execution of a command.\n\n    Attributes:\n        message -- explanation of the error\n    \"\"\"\n\n    def __init__(self, message):\n        \"\"\"\n        Initializes a CreateEnvError object.\n\n        Args:\n            message (str): Explanation of the error.\n\n        Returns:\n            CreateEnvError: A CreateEnvError object.\n\n        Examples:\n            &gt;&gt;&gt; raise CreateEnvError('Error creating environment.')\n            CreateEnvError: Error creating environment.\n        \"\"\"\n        self.message = message\n        super().__init__(self.message)\n</code></pre>"},{"location":"reference/errors/#src.env_exec.errors.CreateEnvError.__init__","title":"<code>__init__(message)</code>","text":"<p>Initializes a CreateEnvError object.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Explanation of the error.</p> required <p>Returns:</p> Name Type Description <code>CreateEnvError</code> <p>A CreateEnvError object.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; raise CreateEnvError('Error creating environment.')\nCreateEnvError: Error creating environment.\n</code></pre> Source code in <code>src/env_exec/errors.py</code> <pre><code>def __init__(self, message):\n    \"\"\"\n    Initializes a CreateEnvError object.\n\n    Args:\n        message (str): Explanation of the error.\n\n    Returns:\n        CreateEnvError: A CreateEnvError object.\n\n    Examples:\n        &gt;&gt;&gt; raise CreateEnvError('Error creating environment.')\n        CreateEnvError: Error creating environment.\n    \"\"\"\n    self.message = message\n    super().__init__(self.message)\n</code></pre>"},{"location":"reference/errors/#src.env_exec.errors.EnvExecError","title":"<code>EnvExecError</code>","text":"<p>             Bases: <code>Exception</code></p> <p>Base class for exceptions in this module.</p> Source code in <code>src/env_exec/errors.py</code> <pre><code>class EnvExecError(Exception):\n    \"\"\"Base class for exceptions in this module.\"\"\"\n    pass\n</code></pre>"},{"location":"reference/errors/#src.env_exec.errors.ExecError","title":"<code>ExecError</code>","text":"<p>             Bases: <code>EnvExecError</code></p> <p>Exception raised for errors in the execution of a command.</p> Source code in <code>src/env_exec/errors.py</code> <pre><code>class ExecError(EnvExecError):\n    \"\"\"Exception raised for errors in the execution of a command.\n\n    Attributes:\n        message -- explanation of the error\n    \"\"\"\n\n    def __init__(self, message):\n        \"\"\"\n        Initializes an ExecError object.\n\n        Args:\n            message (str): Explanation of the error.\n\n        Returns:\n            ExecError: An ExecError object.\n\n        Examples:\n            &gt;&gt;&gt; raise ExecError('Error in command execution.')\n            ExecError: Error in command execution.\n        \"\"\"\n        self.message = message\n        super().__init__(self.message)\n</code></pre>"},{"location":"reference/errors/#src.env_exec.errors.ExecError.__init__","title":"<code>__init__(message)</code>","text":"<p>Initializes an ExecError object.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Explanation of the error.</p> required <p>Returns:</p> Name Type Description <code>ExecError</code> <p>An ExecError object.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; raise ExecError('Error in command execution.')\nExecError: Error in command execution.\n</code></pre> Source code in <code>src/env_exec/errors.py</code> <pre><code>def __init__(self, message):\n    \"\"\"\n    Initializes an ExecError object.\n\n    Args:\n        message (str): Explanation of the error.\n\n    Returns:\n        ExecError: An ExecError object.\n\n    Examples:\n        &gt;&gt;&gt; raise ExecError('Error in command execution.')\n        ExecError: Error in command execution.\n    \"\"\"\n    self.message = message\n    super().__init__(self.message)\n</code></pre>"},{"location":"reference/errors/#src.env_exec.errors.InstallPackageError","title":"<code>InstallPackageError</code>","text":"<p>             Bases: <code>EnvExecError</code></p> <p>Exception raised for errors in the execution of a command.</p> Source code in <code>src/env_exec/errors.py</code> <pre><code>class InstallPackageError(EnvExecError):\n    \"\"\"Exception raised for errors in the execution of a command.\n\n    Attributes:\n        message -- explanation of the error\n    \"\"\"\n\n    def __init__(self, message):\n        \"\"\"\n        Initializes an InstallPackageError object.\n\n        Args:\n            message (str): Explanation of the error.\n\n        Returns:\n            InstallPackageError: An InstallPackageError object.\n\n        Examples:\n            &gt;&gt;&gt; raise InstallPackageError('Error installing package.')\n            InstallPackageError: Error installing package.\n        \"\"\"\n        self.message = message\n        super().__init__(self.message)\n</code></pre>"},{"location":"reference/errors/#src.env_exec.errors.InstallPackageError.__init__","title":"<code>__init__(message)</code>","text":"<p>Initializes an InstallPackageError object.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Explanation of the error.</p> required <p>Returns:</p> Name Type Description <code>InstallPackageError</code> <p>An InstallPackageError object.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; raise InstallPackageError('Error installing package.')\nInstallPackageError: Error installing package.\n</code></pre> Source code in <code>src/env_exec/errors.py</code> <pre><code>def __init__(self, message):\n    \"\"\"\n    Initializes an InstallPackageError object.\n\n    Args:\n        message (str): Explanation of the error.\n\n    Returns:\n        InstallPackageError: An InstallPackageError object.\n\n    Examples:\n        &gt;&gt;&gt; raise InstallPackageError('Error installing package.')\n        InstallPackageError: Error installing package.\n    \"\"\"\n    self.message = message\n    super().__init__(self.message)\n</code></pre>"},{"location":"reference/errors/#src.env_exec.errors.ManagerNotAvailable","title":"<code>ManagerNotAvailable</code>","text":"<p>             Bases: <code>EnvExecError</code></p> <p>Exception raised for errors in the execution of a command.</p> Source code in <code>src/env_exec/errors.py</code> <pre><code>class ManagerNotAvailable(EnvExecError):\n    \"\"\"Exception raised for errors in the execution of a command.\n\n    Attributes:\n        message -- explanation of the error\n    \"\"\"\n\n    def __init__(self, message):\n        \"\"\"\n        Initializes a ManagerNotAvailable object.\n\n        Args:\n            message (str): Explanation of the error.\n\n        Returns:\n            ManagerNotAvailable: A ManagerNotAvailable object.\n\n        Examples:\n            &gt;&gt;&gt; raise ManagerNotAvailable('Manager not available.')\n            ManagerNotAvailable: Manager not available.\n        \"\"\"\n        self.message = message\n        super().__init__(self.message)\n</code></pre>"},{"location":"reference/errors/#src.env_exec.errors.ManagerNotAvailable.__init__","title":"<code>__init__(message)</code>","text":"<p>Initializes a ManagerNotAvailable object.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Explanation of the error.</p> required <p>Returns:</p> Name Type Description <code>ManagerNotAvailable</code> <p>A ManagerNotAvailable object.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; raise ManagerNotAvailable('Manager not available.')\nManagerNotAvailable: Manager not available.\n</code></pre> Source code in <code>src/env_exec/errors.py</code> <pre><code>def __init__(self, message):\n    \"\"\"\n    Initializes a ManagerNotAvailable object.\n\n    Args:\n        message (str): Explanation of the error.\n\n    Returns:\n        ManagerNotAvailable: A ManagerNotAvailable object.\n\n    Examples:\n        &gt;&gt;&gt; raise ManagerNotAvailable('Manager not available.')\n        ManagerNotAvailable: Manager not available.\n    \"\"\"\n    self.message = message\n    super().__init__(self.message)\n</code></pre>"},{"location":"reference/errors/#src.env_exec.errors.MissingDependencyError","title":"<code>MissingDependencyError</code>","text":"<p>             Bases: <code>EnvExecError</code></p> <p>Exception raised for errors in the execution of a command.</p> Source code in <code>src/env_exec/errors.py</code> <pre><code>class MissingDependencyError(EnvExecError):\n    \"\"\"Exception raised for errors in the execution of a command.\n\n    Attributes:\n        message -- explanation of the error\n    \"\"\"\n\n    def __init__(self, message):\n        \"\"\"\n        Initializes a MissingDependencyError object.\n\n        Args:\n            message (str): Explanation of the error.\n\n        Returns:\n            MissingDependencyError: A MissingDependencyError object.\n\n        Examples:\n            &gt;&gt;&gt; raise MissingDependencyError('Missing dependency.')\n            MissingDependencyError: Missing dependency.\n        \"\"\"\n        self.message = message\n        super().__init__(self.message)\n</code></pre>"},{"location":"reference/errors/#src.env_exec.errors.MissingDependencyError.__init__","title":"<code>__init__(message)</code>","text":"<p>Initializes a MissingDependencyError object.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Explanation of the error.</p> required <p>Returns:</p> Name Type Description <code>MissingDependencyError</code> <p>A MissingDependencyError object.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; raise MissingDependencyError('Missing dependency.')\nMissingDependencyError: Missing dependency.\n</code></pre> Source code in <code>src/env_exec/errors.py</code> <pre><code>def __init__(self, message):\n    \"\"\"\n    Initializes a MissingDependencyError object.\n\n    Args:\n        message (str): Explanation of the error.\n\n    Returns:\n        MissingDependencyError: A MissingDependencyError object.\n\n    Examples:\n        &gt;&gt;&gt; raise MissingDependencyError('Missing dependency.')\n        MissingDependencyError: Missing dependency.\n    \"\"\"\n    self.message = message\n    super().__init__(self.message)\n</code></pre>"}]}